# Copyright (C) 2004 Valery Reznic
# This file is part of the Elf Statifier project
# 
# This project is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License.
# See LICENSE file in the doc directory.

# Include file for all .S sources.
# And MY_ORG macro needed to be used in order
# to align code to the REG_SIZE boundary.
# Otherwise gcc (at least gcc 2.95.3)
# will add bytes to the end of the file.
# It is not good, so I do it by myself where I need it


# Idea is following:
#    I need move addr to the multiple by REG_SIZE.
#    (. % REG_SIZE) - how many spare bytes we have
#    (REG_SIZE - (. % REG_SIZE)) - how many bytes we need to add in order to
#                                  by multiplly by REG_SIZE
#    ((REG_SIZE - (. % REG_SIZE )) % REG_SIZE) - if . was alignment avoid 
#                                                adding REG_SIZE bytes

MY_DATA NEXT_CODE
	jmp	data + NEXT_CODE
	/* .org . + ((REG_SIZE - (. % REG_SIZE )) % REG_SIZE) */
	/* 
	 * Now I use 16 instead of REG_SIZE.
	 * The reason is following:
	 * Part of my asm code include another asm file, generated by gcc
	 * from .c 
	 * In gcc generated asm (at least i386) there are .p2align 4,,7
	 * directives.
	 * After using this directive gcc (at least 2.95.3) adjust file not
	 * to the register_size boundary but to 16 boundary.
  	 * Also as man say, that 16 is maximum alignment. So, i use it.
	 */
	.org . + ((16 - (. % 16 )) % 16)
data:

