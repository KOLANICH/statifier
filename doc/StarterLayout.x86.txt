Starter Layout for x86_64

Statified executable has following layout:

Offset                               End
0                                    of file
+---------+--------------+------------+
| starter | executable's | libraries' |
| segment | segments     | segments   |
+---------+--------------+------------+

And it should be in the ELF format.

So let us see what's starter segment looks like.

+--------------+---------+--------------+
|     Ehdr     | N Phdrs | Starter Code |
+--------------+---------+--------------+
               ^         ^
e_phnum = N    |         |
e_phoff -------+         |
                         |
e_shnum = 0              |
e_shoff = 0              |
                         |
e_entry -----------------+

Ehdr is Ehdr from original executable with following fields changed:
e_shnum = 0
e_shoff = 0
   No section information

e_phnum = N - number of segments in the statified executable
e_phoff     - pointed to the start of Phdrs
e_entry     - pointed to the start of Starter Code 

Phdrs generated from the Starter Code size and 
all loaded segments.

It's really all that needed to statified executable be ok
and can run.

But...
There are a couple of program (include gdb, objdump)
which not too like ELF files without sections. 
(At least RH9.0)

I want to make friend (at least with gdb) so I add
Shdrs to the starter segment.

So, finally it's looks like this:

+--------------+---------+---------+--------------+
|     Ehdr     | N Phdrs | M Shdrs | Starter Code |
+--------------+---------+---------+--------------+
               ^         ^         ^
e_phnum = N    |         |         |
e_phoff -------+         |         |
                         |         |
e_shnum = M              |         |
e_shoff -----------------+         |
                                   |
e_entry ---------------------------+

Where Shdrs copied from original executable
(and their offset from beginning of the file increased
to the starter segment size)


Size of starter segments.
Elf specification say:
"Loadable process segments must have congruent values for p_vaddr and
p_offset, modulo the page size. This member (i.e p_align) gives the value
to which the segments are aligned  in memory and in the file."

Because I add starter segment before any others, in order to satisfy
this requirement starter segment size should be multiple of the
first executable load segment's p_align.
